//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_FlyingPigs/Utilities/TouchInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInputs"",
    ""maps"": [
        {
            ""name"": ""CatapultMinigame"",
            ""id"": ""461331a0-a8e7-4f18-aa4a-40511b147a6b"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c068e0db-a9b3-41e6-b4e4-02fa01844256"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01de5f08-710f-4a5e-ac35-52bdbf9e63b6"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ArrowMinigame"",
            ""id"": ""7f554de4-33da-45ad-89b9-5dd53afbd0dc"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""Value"",
                    ""id"": ""2dacbdec-6c6a-4a00-bcbd-167012599f5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40708794-2564-4e1d-b648-513337190d31"",
                    ""path"": ""<Touchscreen>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CatapultMinigame
        m_CatapultMinigame = asset.FindActionMap("CatapultMinigame", throwIfNotFound: true);
        m_CatapultMinigame_TouchInput = m_CatapultMinigame.FindAction("TouchInput", throwIfNotFound: true);
        // ArrowMinigame
        m_ArrowMinigame = asset.FindActionMap("ArrowMinigame", throwIfNotFound: true);
        m_ArrowMinigame_TouchInput = m_ArrowMinigame.FindAction("TouchInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CatapultMinigame
    private readonly InputActionMap m_CatapultMinigame;
    private List<ICatapultMinigameActions> m_CatapultMinigameActionsCallbackInterfaces = new List<ICatapultMinigameActions>();
    private readonly InputAction m_CatapultMinigame_TouchInput;
    public struct CatapultMinigameActions
    {
        private @TouchInputs m_Wrapper;
        public CatapultMinigameActions(@TouchInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchInput => m_Wrapper.m_CatapultMinigame_TouchInput;
        public InputActionMap Get() { return m_Wrapper.m_CatapultMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CatapultMinigameActions set) { return set.Get(); }
        public void AddCallbacks(ICatapultMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_CatapultMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CatapultMinigameActionsCallbackInterfaces.Add(instance);
            @TouchInput.started += instance.OnTouchInput;
            @TouchInput.performed += instance.OnTouchInput;
            @TouchInput.canceled += instance.OnTouchInput;
        }

        private void UnregisterCallbacks(ICatapultMinigameActions instance)
        {
            @TouchInput.started -= instance.OnTouchInput;
            @TouchInput.performed -= instance.OnTouchInput;
            @TouchInput.canceled -= instance.OnTouchInput;
        }

        public void RemoveCallbacks(ICatapultMinigameActions instance)
        {
            if (m_Wrapper.m_CatapultMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICatapultMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_CatapultMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CatapultMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CatapultMinigameActions @CatapultMinigame => new CatapultMinigameActions(this);

    // ArrowMinigame
    private readonly InputActionMap m_ArrowMinigame;
    private List<IArrowMinigameActions> m_ArrowMinigameActionsCallbackInterfaces = new List<IArrowMinigameActions>();
    private readonly InputAction m_ArrowMinigame_TouchInput;
    public struct ArrowMinigameActions
    {
        private @TouchInputs m_Wrapper;
        public ArrowMinigameActions(@TouchInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchInput => m_Wrapper.m_ArrowMinigame_TouchInput;
        public InputActionMap Get() { return m_Wrapper.m_ArrowMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArrowMinigameActions set) { return set.Get(); }
        public void AddCallbacks(IArrowMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_ArrowMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArrowMinigameActionsCallbackInterfaces.Add(instance);
            @TouchInput.started += instance.OnTouchInput;
            @TouchInput.performed += instance.OnTouchInput;
            @TouchInput.canceled += instance.OnTouchInput;
        }

        private void UnregisterCallbacks(IArrowMinigameActions instance)
        {
            @TouchInput.started -= instance.OnTouchInput;
            @TouchInput.performed -= instance.OnTouchInput;
            @TouchInput.canceled -= instance.OnTouchInput;
        }

        public void RemoveCallbacks(IArrowMinigameActions instance)
        {
            if (m_Wrapper.m_ArrowMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArrowMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_ArrowMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArrowMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArrowMinigameActions @ArrowMinigame => new ArrowMinigameActions(this);
    public interface ICatapultMinigameActions
    {
        void OnTouchInput(InputAction.CallbackContext context);
    }
    public interface IArrowMinigameActions
    {
        void OnTouchInput(InputAction.CallbackContext context);
    }
}
